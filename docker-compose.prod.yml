version: '3.8'

services:
  webapp:
    env_file: .env.local
    image: "${DOCKERHUB_USERNAME}/talentora-webapp-production:latest"
    ports:
      - "80:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - NEXT_PUBLIC_GROQ_API_KEY=${NEXT_PUBLIC_GROQ_API_KEY}
      - NEXT_PUBLIC_MERGE_API_KEY=${NEXT_PUBLIC_MERGE_API_KEY}
      - NEXT_PUBLIC_CARTESIA_API_KEY=${NEXT_PUBLIC_CARTESIA_API_KEY}
      - NEXT_PUBLIC_DAILY_BOT_API_KEY=${NEXT_PUBLIC_DAILY_BOT_API_KEY}
      - NEXT_PUBLIC_DAILY_API_KEY=${NEXT_PUBLIC_DAILY_API_KEY}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - NEXT_PUBLIC_LIVEKIT_URL=${NEXT_PUBLIC_LIVEKIT_URL}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
      - NEXT_PUBLIC_MANUAL_ROOM_ENTRY=${NEXT_PUBLIC_MANUAL_ROOM_ENTRY}
      - INTERVIEW_BOT_URL=${INTERVIEW_BOT_URL}
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-auth:
        condition: service_started
      supabase-rest:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  supabase-db:
    image: supabase/postgres:15.1.1.78
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
      - -c
      - log_min_messages=fatal
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: 5432
      POSTGRES_PORT: 5432
      PGPASSWORD: ${SUPABASE_PASSWORD}
      POSTGRES_PASSWORD: ${SUPABASE_PASSWORD}
      PGDATABASE: postgres
      POSTGRES_DB: postgres
      PGUSER: postgres
      POSTGRES_USER: postgres
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d/migrations:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network

  supabase-auth:
    image: supabase/gotrue:v2.99.0
    depends_on:
      supabase-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      timeout: 5s
      interval: 5s
      retries: 3
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${NEXT_PUBLIC_SITE_URL}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${SUPABASE_PASSWORD}@supabase-db:5432/postgres
      GOTRUE_SITE_URL: ${NEXT_PUBLIC_SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${NEXT_PUBLIC_SITE_URL}
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: true
      GOTRUE_EXTERNAL_GITHUB_ENABLED: true
      GOTRUE_EXTERNAL_GITHUB_CLIENT_ID: ${SUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID}
      GOTRUE_EXTERNAL_GITHUB_SECRET: ${SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET}
      GOTRUE_EXTERNAL_GITHUB_REDIRECT_URI: ${SUPABASE_AUTH_EXTERNAL_GITHUB_REDIRECT_URI}
      GOTRUE_MAILER_AUTOCONFIRM: false
      GOTRUE_SMTP_ADMIN_EMAIL: ${RESEND_API_KEY}
      GOTRUE_SMTP_HOST: smtp.resend.com
      GOTRUE_SMTP_PORT: 587
      GOTRUE_SMTP_USER: resend
      GOTRUE_SMTP_PASS: ${RESEND_API_KEY}
      GOTRUE_SMTP_SENDER_NAME: Talentora
      GOTRUE_MAILER_URLPATHS_INVITE: /auth/v1/verify
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: /auth/v1/verify
      GOTRUE_MAILER_URLPATHS_RECOVERY: /auth/v1/verify
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: /auth/v1/verify
    ports:
      - "9999:9999"
    networks:
      - app-network

  supabase-rest:
    image: postgrest/postgrest:v11.2.0
    depends_on:
      supabase-db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://authenticator:${SUPABASE_PASSWORD}@supabase-db:5432/postgres
      PGRST_DB_SCHEMAS: public,storage,graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: 3600
    ports:
      - "3001:3000"
    networks:
      - app-network

  supabase-realtime:
    image: supabase/realtime:v2.25.35
    depends_on:
      supabase-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/"]
      timeout: 5s
      interval: 5s
      retries: 3
    restart: unless-stopped
    environment:
      PORT: 4000
      DB_HOST: supabase-db
      DB_PORT: 5432
      DB_USER: supabase_admin
      DB_PASSWORD: ${SUPABASE_PASSWORD}
      DB_NAME: postgres
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: ${JWT_SECRET}
      FLY_ALLOC_ID: fly123
      FLY_APP_NAME: realtime
      SECRET_KEY_BASE: ${JWT_SECRET}
      ERL_AFLAGS: -proto_dist inet_tcp
      ENABLE_TAILSCALE: "false"
      DNS_NODES: "''"
    ports:
      - "4000:4000"
    networks:
      - app-network

  supabase-storage:
    image: supabase/storage-api:v0.40.4
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-rest:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/status"]
      timeout: 5s
      interval: 5s
      retries: 3
    restart: unless-stopped
    environment:
      ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      POSTGREST_URL: http://supabase-rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://supabase_storage_admin:${SUPABASE_PASSWORD}@supabase-db:5432/postgres
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: us-east-1
      GLOBAL_S3_BUCKET: stub
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://supabase-imgproxy:5001
    volumes:
      - supabase-storage-data:/var/lib/storage
    ports:
      - "5000:5000"
    networks:
      - app-network

  supabase-imgproxy:
    image: darthsim/imgproxy:v3.8.0
    healthcheck:
      test: ["CMD", "imgproxy", "health"]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      IMGPROXY_BIND: ":5001"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: "true"
      IMGPROXY_ENABLE_WEBP_DETECTION: "true"
    volumes:
      - supabase-storage-data:/var/lib/storage:ro
    ports:
      - "5001:5001"
    networks:
      - app-network

  supabase-meta:
    image: supabase/postgres-meta:v0.68.0
    depends_on:
      supabase-db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: ${SUPABASE_PASSWORD}
    ports:
      - "8080:8080"
    networks:
      - app-network

  supabase-studio:
    image: supabase/studio:20231103-b1c2b58
    depends_on:
      supabase-meta:
        condition: service_started
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/profile', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"]
      timeout: 5s
      interval: 5s
      retries: 3
    restart: unless-stopped
    environment:
      STUDIO_PG_META_URL: http://supabase-meta:8080
      POSTGRES_PASSWORD: ${SUPABASE_PASSWORD}
      DEFAULT_ORGANIZATION_NAME: Talentora
      DEFAULT_PROJECT_NAME: Talentora Production
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_PUBLIC_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
    ports:
      - "3030:3000"
    networks:
      - app-network

  supabase-kong:
    image: kong:2.8.1
    restart: unless-stopped
    depends_on:
      supabase-auth:
        condition: service_started
      supabase-rest:
        condition: service_started
      supabase-realtime:
        condition: service_started
      supabase-storage:
        condition: service_started
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    volumes:
      - ./supabase/config/kong.yml:/var/lib/kong/kong.yml:ro
    ports:
      - "8000:8000"
    networks:
      - app-network

volumes:
  supabase-db-data:
    driver: local
  supabase-storage-data:
    driver: local

networks:
  app-network:
    driver: bridge 