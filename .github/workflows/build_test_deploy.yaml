name: 'build-test-deploy-Next.js'

on:
  push:
    branches:
      - main
      - dev
      - staging
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # SUPABASE
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
  SUPABASE_CONNECTION_STRING: ${{ secrets.SUPABASE_CONNECTION_STRING }}
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY }}

  SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
  SUPABASE_AUTH_EXTERNAL_GITHUB_REDIRECT_URI: ${{ secrets.SUPABASE_AUTH_EXTERNAL_GITHUB_REDIRECT_URI }}
  SUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID: ${{ secrets.SUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID }}
  SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET: ${{ secrets.SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET }}

  # STRIPE
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
  STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

  NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
  NEXT_PUBLIC_MANUAL_ROOM_ENTRY: ${{ secrets.NEXT_PUBLIC_MANUAL_ROOM_ENTRY }}
  NEXT_PUBLIC_GROQ_API_KEY: ${{ secrets.NEXT_PUBLIC_GROQ_API_KEY }}
  INTERVIEW_BOT_URL: 'https://talentora-interviewbot-production.up.railway.app'

  # MERGE
  NEXT_PUBLIC_MERGE_API_KEY: ${{ secrets.NEXT_PUBLIC_MERGE_API_KEY }}

  # CARTESIA
  NEXT_PUBLIC_CARTESIA_API_KEY: ${{ secrets.NEXT_PUBLIC_CARTESIA_API_KEY }}

  # DAILY
  NEXT_PUBLIC_DAILY_BOT_API_KEY: ${{ secrets.NEXT_PUBLIC_DAILY_BOT_API_KEY }}

  # LIVEKIT
  LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY }}
  LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET }}
  NEXT_PUBLIC_LIVEKIT_URL: ${{ secrets.NEXT_PUBLIC_LIVEKIT_URL }}

jobs:
  install-and-test: # Validation, lint test.
    needs: generate_types
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm i --frozen-lockfile

      - name: Run Lint
        run: |
          pnpm run lint
          pnpm run prettier-fix
        continue-on-error: true

      - name: Run Tests
        run: pnpm test
        continue-on-error: true

      - name: Build Next.js project
        run: pnpm build

  generate_types:
    needs: install-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: init supabase
        run: |
          supabase init --force
          supabase db start

      - name: Verify generated types match Postgres schema
        run: |
          mkdir -p types
          npx supabase gen types typescript --local --schema public > types/types_db.ts
          if ! git diff --ignore-space-at-eol --exit-code --quiet types/types_  db.ts; then
            echo "Detected uncommitted changes after build. See status below:"
            git diff
          else
            echo "No changes detected."
            exit 0
          fi
      - name: Set Git config with custom user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ github.head_ref || github.ref_name }}  # Fetch the branch
          git checkout ${{ github.head_ref || github.ref_name }}  # Check out the branch to avoid detached HEAD
          git add types/types_db.ts
          git commit -m "Update generated types based on Postgres schema" || echo "Nothing to commit"
          git pull origin ${{ github.head_ref || github.ref_name }}  # Pull the latest changes
          git push origin ${{ github.head_ref || github.ref_name }}  # Push to the correct branch

  deploy:
    needs: install-and-test
    runs-on: ubuntu-latest
    steps:
      # 1. Check out code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Log in to Docker Hub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Build Docker image
      - name: Build and Push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build . -t ${{ secrets.DOCKERHUB_USERNAME }}/talentora-webapp-staging:$IMAGE_TAG
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/talentora-webapp-staging:$IMAGE_TAG

      # 4. SSH into EC2 and deploy the new container
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker container prune --force
            docker image prune --all --force
            docker system prune --volumes --force

            IMAGE_TAG=${{ github.sha }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/talentora-webapp-staging:$IMAGE_TAG

            docker stop talentora-webapp-staging || true
            docker rm talentora-webapp-staging || true

            docker run -d \
              --name talentora-webapp-staging \
              --restart unless-stopped \
              -p 80:80 \
              ${{ secrets.DOCKERHUB_USERNAME }}/talentora-webapp-staging:$IMAGE_TAG
