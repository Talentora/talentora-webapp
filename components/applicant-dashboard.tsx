/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/SImx0XJ4Sei
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo, JSX, SVGProps } from 'react'
import { Input } from '@/components/ui/input';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/Button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose
} from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';

export function ApplicantDashboard() {
  const [search, setSearch] = useState('');
  const [sort, setSort] = useState({ key: 'name', order: 'asc' });
  const [applicants, setApplicants] = useState([
    {
      id: 'a1',
      name: 'John Doe',
      email: 'john@example.com',
      resume: '/john-doe-resume.pdf',
      status: 'Pending'
    },
    {
      id: 'a2',
      name: 'Jane Smith',
      email: 'jane@example.com',
      resume: '/jane-smith-resume.pdf',
      status: 'Reviewed'
    },
    {
      id: 'a3',
      name: 'Bob Johnson',
      email: 'bob@example.com',
      resume: '/bob-johnson-resume.pdf',
      status: 'Rejected'
    },
    {
      id: 'a4',
      name: 'Sarah Lee',
      email: 'sarah@example.com',
      resume: '/sarah-lee-resume.pdf',
      status: 'Accepted'
    },
    {
      id: 'a5',
      name: 'Mike Brown',
      email: 'mike@example.com',
      resume: '/mike-brown-resume.pdf',
      status: 'Pending'
    }
  ]);
  const filteredApplicants = useMemo(() => {
    return applicants
      .filter((applicant) => {
        const searchValue = search.toLowerCase();
        return (
          applicant.name.toLowerCase().includes(searchValue) ||
          applicant.email.toLowerCase().includes(searchValue) ||
          applicant.status.toLowerCase().includes(searchValue)
        );
      })
      .sort((a, b) => {
        if (sort.order === 'asc') {
          // @ts-ignore
          return a[sort.key] > b[sort.key] ? 1 : -1;
        } else {
          // @ts-ignore
          return a[sort.key] < b[sort.key] ? 1 : -1;
        }
      });
  }, [applicants, search, sort]);
  const [selectedApplicant, setSelectedApplicant] = useState(null);
  return (
    <div className="flex flex-col gap-4">
      <header className="flex items-center justify-between bg-background p-4 shadow">
        <h1 className="text-2xl font-bold">Job Applicants</h1>
        <div className="relative flex items-center">
          <div className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search applicants..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            className="w-full rounded-lg bg-background pl-8 pr-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
          />
        </div>
      </header>
      <div className="flex-1 overflow-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead
                className="cursor-pointer"
                onClick={() =>
                  setSort({ key: 'name', order: sort.key === 'name' ? (sort.order === 'asc' ? 'desc' : 'asc') : 'asc' })
                }
              >
                Name {sort.key === 'name' && <span className="ml-1">{sort.order === 'asc' ? '\u2191' : '\u2193'}</span>}
              </TableHead>
              <TableHead
                className="cursor-pointer"
                onClick={() =>
                  setSort({
                    key: 'email',
                    order: sort.key === 'email' ? (sort.order === 'asc' ? 'desc' : 'asc') : 'asc'
                  })
                }
              >
                Email{' '}
                {sort.key === 'email' && <span className="ml-1">{sort.order === 'asc' ? '\u2191' : '\u2193'}</span>}
              </TableHead>
              <TableHead>Resume</TableHead>
              <TableHead
                className="cursor-pointer"
                onClick={() =>
                  setSort({
                    key: 'status',
                    order: sort.key === 'status' ? (sort.order === 'asc' ? 'desc' : 'asc') : 'asc'
                  })
                }
              >
                Status{' '}
                {sort.key === 'status' && <span className="ml-1">{sort.order === 'asc' ? '\u2191' : '\u2193'}</span>}
              </TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredApplicants.map((applicant) => (
              <TableRow key={applicant.id}>
                <TableCell className="font-medium">{applicant.name}</TableCell>
                <TableCell>{applicant.email}</TableCell>
                <TableCell>
                  <a href="#" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                    View Resume
                  </a>
                </TableCell>
                <TableCell>
                  <Badge
                    variant={
                      applicant.status === 'Accepted'
                        ? 'success'
                        : applicant.status === 'Rejected'
                          ? 'danger'
                          : 'default'
                    }
                  >
                    {applicant.status}
                  </Badge>
                </TableCell>
                <TableCell>
                  <Button size="icon" variant="outline" onClick={() => setSelectedApplicant(applicant)}>
                    <EyeIcon className="h-4 w-4" />
                    <span className="sr-only">View applicant details</span>
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
      {selectedApplicant && (
        <Dialog>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>Applicant Details</DialogTitle>
              <DialogDescription>View the details for {selectedApplicant.name}.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label>Name</Label>
                  <p>{selectedApplicant.name}</p>
                </div>
                <div>
                  <Label>Email</Label>
                  <p>{selectedApplicant.email}</p>
                </div>
              </div>
              <div>
                <Label>Resume</Label>
                <a href="#" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                  View Resume
                </a>
              </div>
              <div>
                <Label>Status</Label>
                <Badge
                  variant={
                    selectedApplicant.status === 'Accepted'
                      ? 'success'
                      : selectedApplicant.status === 'Rejected'
                        ? 'danger'
                        : 'default'
                  }
                >
                  {selectedApplicant.status}
                </Badge>
              </div>
            </div>
            <DialogFooter>
              <div>
                <Button variant="outline">Close</Button>
              </div>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}

function EyeIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}
